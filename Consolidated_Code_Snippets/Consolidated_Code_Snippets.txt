// Purpose: This code snippet demonstrates my proficiency in working with React, custom hooks, and context.

import { createContext, useState, useEffect, useContext } from "react";

// Create a new context object for navigation
const NavigationContext = createContext();

// The NavigationProvider component provides the navigation context to its children
import { createContext, useState, useEffect } from "react";

const NavigationContext = createContext();

function NavigationProvider({ children }) {
  const [currentPath, setCurrentPath] = useState(window.location.pathname);

  useEffect(() => {
    const handler = () => {
      setCurrentPath(window.location.pathname);
    };

    window.addEventListener("popstate", handler);

    return () => {
      window.removeEventListener("popstate", handler);
    };
  }, []);

  const navigate = (to) => {
    window.history.pushState({}, "", to);
    setCurrentPath(to)
  };

  return (
    // Provide the currentPath and navigate functions to its children
    <NavigationContext.Provider value={{ currentPath, navigate }}>
      {children}
    </NavigationContext.Provider>
  );
}

export { NavigationProvider };
export default NavigationContext;

// The Route component uses the useNavigation hook to get the current path from the navigation context
function Route({ path, children }) {
    const { currentPath } = useNavigation();

    // If the current path matches the specified path, render the children components
    if (path === currentPath) return children;

    // If the current path does not match the specified path, return null (i.e. render nothing)
    return null;
}

export default Route;

// The useNavigation hook uses the useContext hook to get the navigation context object
import { useContext } from "react";
import NavigationContext from "../context/navigation";

function useNavigation() {
  return useContext(NavigationContext);
}

export default useNavigation;

// These code examples show how I can utilize React's context and custom hooks to build reusable components. The NavigationProvider component provides the navigation context to its children, while the Route component uses the useNavigation hook to get the current path from the navigation context. This promotes code modularity and makes it easier to maintain and refactor the codebase in the future.